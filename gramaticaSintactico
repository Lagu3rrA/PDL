Aquí escribiremos toda la gramática utilizada en el análisis sintáctico

No terminales:
{
    Main, Programa, Funcion, Cuerpo, Sentencia, Bloque, Exprexion, Condicion, Condicion2,
    Aritmetica, Types, ParametrosFun, ParametrosFun2, Tipo
}

Axioma: Main

Terminales:
{
alert,boolean, else, function, if, input, let, number, return, string, while, false, true, do,
autoInc, Número, Posición(Número), Número, equal, colon, semicolon, openPar, closePar, openBraq,
closeBraq, plus, minus, and, not, notEquals, equals
}

Producciones = {

    MAIN -> PROGRAMA PROGRAMA      // Siempre tiene que abrirse un programa (como minimo) 
    
                                   //  ---- Puedo llamar: ----
    PROGRAMA -> CUERPO PROGRAMA    // A un cuerpo de porgrama
    PROGRAMA -> FUNCION PROGRAMA   // A una funcion  
    PROGRAMA ->                    // O terminar


    FUNCION -> function id openPar PARAMETROSFUN closePar openBraq  CUERPO closeBraq 


//  ---- Dentro del cuerpo podemos ---- 
// Definir una varible
// hacer if simples
// hacer if de una sola linea (sin corchetes)
// hacer un do While 

    CUERPO -> let TIPO id semicolon                                            
    CUERPO -> if  openPar CONDICION closePar openBraq BLOQUE closeBraq         
    CUERPO -> if  openPar CONDICION closePar SENTENCIA semicolon               
    CUERPO -> do  openBraq BLOQUE closeBraq while  openPar CONDICION  closePar              
    
    //  ---- Podemos declara sentecias ---- 
    SENTENCIA -> id  igual  EXPRESION                  // identificador = expresion 
    SENTENCIA -> id  openPar  PARAMETROSFUN  closePar  // llamamos a una funcion con sus parametros
    SENTENCIA -> id alert openPar EXPRESION closePar   // Crea una alertaS
    SENTENCIA -> return  RETURNVALUE                   // devolveria un returnvaule
    
    //  ---- Con esto podemos encadenar ----
    BLOQUE -> CUERPO                   // Por un lado encadenar los if y las cosas de dentro
    BLOQUE -> SENTENCIA BLOQUE         // Con en esto podemos encadenar sentencias
    BLOQUE ->                          // Terminamos 
    
     // ---- Posibles expresiones ----
    EXPRESION -> ARITMETICA semicolon  // una operacion aritmetica y ;
    EXPRESION -> not TYPES semicolon   // una negacion de un TYPE y ; 
    EXPRESION -> TYPES semicolon       // un TYPES a secas
    EXPRESION ->                       // o terminar

    //  ---- Posibles condiciones ----
    CONDICION -> TYPES notequals TYPES CONDICION2      // Puede ser diferente
    CONDICION -> TYPES equals TYPES CONDICION2         // Puede ser igual 
    CONDICION2 -> and CONDICION                        // Pueden encadenarse varias condiciones
    CONDICION2 ->                                      // Podemos terminar
     
    // ---- Operaciones que se puede hacer a los id ----
    ARITMETICA -> TYPES plus TYPES ARITMETICA   // a + b      
    ARITMETICA -> TYPES minus TYPES ARITMETICA  // a - b
    ARITMETICA -> TYPES autoInc                 // a++

    // ---- Elementos de entradas de una expresion ---- 
    TYPES-> id     // identificador
    TYPES-> ent    // entero
    TYPES-> cad    // cadena 
    TYPES -> true  // Verdadero
    TYPES -> false // Falso
    TYPES-> id openPar  LLAMADAFUN  closePar semicolon // LLamada a una funcion

    //  ---- Como tratamos los datos que introduciomos auna funcion ----
    
    
    PARAMETROSFUN -> id  PARAMETROSFUN2 // Tiene que tener un id como minimo
    PARAMETROSFUN2 -> colon PARAMETROSFUN // para encadenar usaremos las comas
    PARAMETROSFUN2 ->  // y si queremos terminar salimos

    //  ---- Tipos de datos que podemos tener ----
    TIPO -> string 
    TIPO -> number
    TIPO -> boolean

---------------------------- LEYENDA ---------------------------------------------------

MAIN -> M
PROGRAMA -> P
FUNCION -> F
CUERPO -> C
SENTENCIA -> S
BLOQUE -> B    
EXPRESION -> E
CONDICION -> N  
CONDICION2 -> N'
ARITMETICA -> A
TYPES -> T
PARAMETROSFUN -> R
PARAMETROSFUN2 -> R'
TIPO -> Y

---------------------------------Aqui escribiremos toda la gramática utilizada en el análisis sintáctico---------

Aquí escribiremos toda la gramática utilizada en el análisis sintáctico

No terminales:
{
    M, P, F, C, S, B, E, N, N',
    A, Y, R, R', Y
}

Axioma: M

Terminales:
{
alert,boolean, else, function, if, input, let, number, return, string, while, false, true, do,
autoInc, Número, Posición(Número), Número, equal, colon, semicolon, openPar, closePar, openBraq,
closeBraq, plus, minus, and, not, notEquals, equals
}

Producciones = {

    M -> P P      

    P -> C P | F P | lambda                   

    F -> function id openPar R closePar openBraq  C closeBraq 

    C -> if openPar N closePar C' | let Y id semicolon | do openBraq B closeBraq while  openPar N  closePar
    C' ->  openBraq B closeBraq | S semicolon               
    
    S -> id S' | return  RETURNVALUE  
    S' ->  igual E |  openPar R closePar | 
          alert openPar E closePar                 

    B -> C | S B | lambda                          

    E -> A semicolon | not T semicolon | T semicolon | lambda

    N -> T N' 
    N' ->  notEquals T N'' |  equals T N'' 
    N'' -> && N | lambda                                 
     
    A -> T A'          
    A' -> plus T A |  minus T A |  autoInc           


    T -> id T' | ent | cad | true | false 
    T' -> openPar LLAMADAFUN closePar semicolon | lambda
    
    R -> id  R' 

    R' -> colon R | lambda

    Y -> string | number | boolean




    
    -------------------------------------------------------------------------------------------------
    |                FIRST                           |                      Follow                  |
-----------------------------------------------------------------------------------------------------
| M  |   eol  eof  let  if  do   function   lambda    |                        $                     |
-----------------------------------------------------------------------------------------------------
| P  |   eol  eof  let  if  do   function   lambda    |                        $                     |
-----------------------------------------------------------------------------------------------------
| F  |   function  id openPar                         |          closePar openBraq close             |
-----------------------------------------------------------------------------------------------------
| C  |    let if do                                   |    string number boolean openPar    eol      |
-----------------------------------------------------------------------------------------------------
| C' |    let if do                                   |    string number boolean openPar    eol      |
-----------------------------------------------------------------------------------------------------
| S  |              id        Return                  |  alert openPar igual  lambda                 |
-----------------------------------------------------------------------------------------------------
| S' |                                                |                                              |
-----------------------------------------------------------------------------------------------------
| B  |                             lambda             |                                              |
-----------------------------------------------------------------------------------------------------
| E  |     id | ent | cad | true | false | not        |          semicolon, lambda                   |
-----------------------------------------------------------------------------------------------------
| N  |       id | ent | cad | true | false            |                                              |
-----------------------------------------------------------------------------------------------------
| N' |                                                |                                              |
-----------------------------------------------------------------------------------------------------
| N''|                                                |                                              |
-----------------------------------------------------------------------------------------------------
| A  |      id | ent | cad | true | false             |                                              |
-----------------------------------------------------------------------------------------------------
| A' |      id | ent | cad | true | false             |                                              |
-----------------------------------------------------------------------------------------------------
| T  |      id | ent | cad | true | false             |                                              |
-----------------------------------------------------------------------------------------------------
| T' |      id | ent | cad | true | false             |                                              |
-----------------------------------------------------------------------------------------------------
| R  |   id openPar colon                             |   id                                         |
-----------------------------------------------------------------------------------------------------
| R' |   id lambda                                    | colon                                        |
-----------------------------------------------------------------------------------------------------
| Y  |                                                |                                              |
-----------------------------------------------------------------------------------------------------

Nueva gramatica sintactico siguiendo pautas del profesoR

Expresiones
__________________________________

E -> E && R | R
R -> R == U | R != U | U
U -> U + V | U - V | V
V -> ID | ( E ) | ID ( L ) | ENT | CAD | TRUE | FALSE | !V | V++


Sentencias Simples
__________________________________

S -> ID = E ;
S -> ID ( L ) ;
S -> ALERT ( E ) ;
S -> INPUT ( ID ) ;
S -> RETURN X ;

L -> E Q | λ
Q -> , E Q | λ
X -> E | λ


Sentencias Compuestas
__________________________________

B -> IF ( E ) S
B -> LET T ID
B -> S
B -> DO { C } WHILE ( E );

T -> NUMBER | BOOLEAN | STRING


Declaraciones de Funciones
__________________________________

F -> FUNCTION H ID ( A ) { C }

H -> T | λ
A -> T ID K | λ
K -> , T ID K | λ
C -> B C | λ


Estructura de un programa = Axioma
__________________________________

P -> B P 
P -> F P
P -> λ